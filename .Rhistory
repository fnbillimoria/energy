legend("topright",pch=c[17,8],c("blue","red"),c("May","Other","Months"))
legend("topright",pch=c[17,8],c("blue","red"),c("May","Other Months"))
legend("topright",pch=c(17,8),legend=c("blue","red"),c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
ab
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow(c(1,2)))
par(mfrow=c(1,2))
points(airquality$Wind,airquality$Ozone)
points(airquality$Wind,airquality$Ozone, main = "Ozone and WInd")
points(airquality$Wind,airquality$Ozone, main = "Ozone and Wund")
points(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone,main="Ozone and Wind)
)
plot(airquality$Wind, airquality$Ozone,main="Ozone and Wind)
plot(airquality$Wind, airquality$Ozone,title(main="Ozone and Wind)
)
ds
3
32rjk
adsflkj
).
\
]
plot
3
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtet(Ozone and Weather in New York City",outer=TRUE)
mtext("Ozone and Weather in New York City",outer=TRUE)
pip install rpy2
python setup.py install.packages()
swirl()
load.packages("swirl")
load.packages("swirl.R")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,airquality,layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors())
sample(colors(),10)
pa1 <- colorRamp(c("red","blue")
)
pa1 <- colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0
0xcc
p2 <- colorRampPalette("red","yellow")
p2 <- colorRampPalette("red","yellow")
p2 <- colorRampPalette(c("red","yellow"))
p2
p2(2
)
p2(10)
showMe()
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
d
d
p2 <- colorRampPalette(c("red","yellow"))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
d
rbg()
plot(x,y,pch=19,co=c(0,.5,0.5))
d
d
plot(x,y,pch=19,co=c(0,.5,0.5))
plot(x,y,pch=19,col=c(0,.5,0.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
brewer.pal(3,"BuGn")
cols <- brewer.pal(3,"BuGn")
showMe()
showMe(cv)
showMe(cv)d
d
showMe(cv)d
showMe(cv)
showMe(cols)
pal <- colorRampPalette(cols)
showme(pal(3))
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,mpg)
e
data
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg,color=drv)
qplot(displ, hwy, data = mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,color=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hw,data=mpg,facets = .~drv
)
qplot(displ,hw,data=mpg,facets = .~drv)
qplot(displ,hw,data=mpg,facets = . ~ drv)
qplot(displ,hw,data=mpg,facets = ". ~ drv")
qplot(displ,hw,data=mpg,facets = ". ~ drv")
dsa
help
qplot(displ,hwy,data=mpg,facets = ". ~ drv")
qplot(displ,hwy,data=mpg,facets = . ~ drv)
qplot(hwy,data=mpg,facets = ~ . drv)
qplot(hwy,data=mpg,facets = ~ . drv,binwidth=2)
qplot(hwy,data=mpg,facets = drv ~ .,binwidth=2)
source("corefile.R")
setwd("~/Documents/energy_project")
source("corefile.R")
Lastday_file$datetime <- as.character(Lastday_file$datetime)
fil <- aggregate(Inertia ~ datetime + Region,data=Lastday_file,sum)
fil
fil$datetime <- as.Date(fil$datetime)
fil
fil
source("corefile.R")
source("corefile.R")
source("corefile.R")
View(Lastday_file)
Lastday_file
library(ggplot2)
library(ggplot)
library(ggplot2
)
head(Lastday_file)
Lastday_file[3,]
Lastday_file$datetime <- strptime(Lastday_file$datetime,"%Y/%m/%d %H:%M:%S")
head(Lastday_file)
Curr_file1
aggregate(Inertia ~ datetime + Region,data=Curr_file1,sum)
aggregate.data.frame(Inertia ~ datetime + Region,data=Curr_file1,sum)
aggregate(x=Inertia,by=list(datetime,Region),data=Curr_file1,sum)
aggregate(x=Curr_file1$Inertia,by=list(datetime,Region),data=Curr_file1,sum)
aggregate(x=Curr_file1$Inertia,by=list(Curr_file1$datetime,Curr_file1$Region),data=Curr_file1,sum)
aggregate(Inertia ~ datetime * Region,data=Curr_file1,sum)
aggregate(Inertia ~ list(datetime,Region),data=Curr_file1,sum)
aggregate(Curr_file1$Inertia,list(Curr_file1$datetime,Curr_file1$Region),FUN=sum)
Curr_file <- na.omit(Curr_file1)
Curr_file1 <- na.omit(Curr_file1)
aggregate(Curr_file1$Inertia,list(Curr_file1$datetime,Curr_file1$Region),FUN=sum)
CCurr_file
Curr_file1
head(Curr_file)
aggregate(Inertia ~ datetime + Region,data=Curr_file1,sum)
aggregate(Inertia ~ Region,data=Curr_file1,sum)
aggregate(Inertia ~ datetime & Region,data=Curr_file1,sum)
aggregate(Inertia ~ datetime && Region,data=Curr_file1,sum)
aggregate(Inertia ~ datetime and Region,data=Curr_file1,sum)
aggregate(Inertia ~ datetime + Region,data=Curr_file1,sum)
aggregate(Inertia ~ .(Region,datetime),data=Curr_file1,sum)
aggregate(Inertia ~ .list(Region,datetime),data=Curr_file1,sum)
aggregate(Inertia ~. list(Region,datetime),data=Curr_file1,sum)
aggregate(Inertia ~.list(Region,datetime),data=Curr_file1,sum)
aggregate(Curr_file1$Inertia,list(Curr_file1$datetime,Curr_file1$Region),FUN=sum)
aggregate(Curr_file1$Inertia,by=list(Curr_file1$datetime,Curr_file1$Region),FUN="sum"")
)
d
dd
,c
break
)31
2
3_;
}
}
dfa
aggregate(Curr_file1$Inertia,by=list(Curr_file1$datetime,Curr_file1$Region),FUN="sum")
Curr_file1$datetime <- as.POSIXct(Curr_file1$datetime)
aggregate(Curr_file1$Inertia,by=list(Curr_file1$datetime,Curr_file1$Region),FUN="sum")
aggregate(Inertia ~ datetime + Region,data=Curr_file1,sum)
View(Curr_file1)
Curr_file1$datetime <- as.character(Curr_file1$datetime)
Curr_file1$datetime <- as.POSIXct(Curr_file1$datetime,"%Y/%m/%d %H:%M:%S")
Curr_file1
Curr_file1[,1]
source("corefile.R")
source("corefile.R")
Last_day_file
head(Last_day_file)
head(Last_day_file,1:100)
head(Last_day_file,00)
head(Last_day_file,100)
View(Last_day_file)
Tassie <- subset(Last_day_file,Region="TAS1")
Tassie
Tassie
Tassie
head(Last_day_file,100)
Last_day_file$Region
Tassie <- Last_day_file[Last_day_file$Region="TAS1"]
Tassie <- Last_day_file[Last_day_file$Region=="TAS1"]
Tassie <- subset(Last_day_file,Region=="TAS1")
Tassie
ggplot(Last_day_file,mapping=aes(datetime,Inertia))
ggplot(Last_day_file,mapping=aes(datetime,Inertia))+geom_line()
ggplot(Tassie,mapping=aes(datetime,Inertia))+geom_line()
View(Curr_file)
View(Gendata)
View(Gendata)
Object.size(Last_day_file)
object.size(Last_day_file)
object.size(Last_day_file)/1000000
df <- c(Last_day_file,Last_day_file)
df
head(df)
head(df)
head(df,2)
head(a)
head(Tassie)
object.size(Last_day_file)/1000000
object.size(Last_day_file)/1000000*365
*2
object.size(Last_day_file)/1000000*365*4*2
object.size(Last_day_file)/1000000*365
library(stringr)
Nem_base_url <- "http://www.nemweb.com.au/"
Arch_url <- "http://www.nemweb.com.au/REPORTS/ARCHIVE/Dispatch_SCADA/"
Curr_url <- "http://www.nemweb.com.au/REPORTS/CURRENT/Dispatch_SCADA/"
Gendata <- read.csv("NEMData.csv")
Download_Arch <- function(baseurl,archurl,gendata) {
Arch_parsed <- htmlParse(archurl)
Arch_links <- xpathSApply(Arch_parsed,"//@href")
Arch_links <- paste(baseurl,Arch_links,sep="")
Last <- length(Arch_links)
First_link <- Arch_links[1]
Last_link <- Arch_links[Last]
dtf <- strsplit(First_link,"_")
dtf <- as.POSIXct(strptime(dtf[3],"%Y%m%d%H%M"))
dtl <- strsplit(Last_link,"_")
dtl <- as.POSIXct(strptime(dtl[3],"%Y%m%d%H%M"))
Archive_data <- {data.frame(datetime=character(),DUID=character(),
MW=numeric(),State=numeric(),
Inertia=numeric(),Region=character())}
}
dtf
Download_Arch(Nem_base_url,Arch_url,Curr_url)
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
baseurl <- "http://www.nemweb.com.au/"
archurl <- "http://www.nemweb.com.au/REPORTS/ARCHIVE/Dispatch_SCADA/"
Currurl <- "http://www.nemweb.com.au/REPORTS/CURRENT/Dispatch_SCADA/"
gendata <- read.csv("NEMData.csv")
Arch_parsed <- htmlParse(archurl)
Arch_links <- xpathSApply(Arch_parsed,"//@href")
Arch_links <- paste(baseurl,Arch_links,sep="")
print(head(Arch_links))
Last <- length(Arch_links)
Last
print(Last)
First_link <- Arch_links[2]
print(First_link)
Last_link <- Arch_links[Last]
First_link
dtf <- strsplit(First_link,c("_","."))
dtf
reg <- "([[:digit:]]{8})"
str_extract(dtf,reg)
as.POSIXct(strptime(str_extract(dtf,reg),"%Y%m%d%H%M"))
g <- str_extract(dtf,reg)
strptime(g,%Y%m%d%)
strptime(g,"%Y%m%d%)
strptime(g,"%Y%m%d%)
strptime(g,"%Y%m%d%")
g
strptime(g,"%Y%m%d")
Arch_parsed <- htmlParse(archurl)
Arch_links <- xpathSApply(Arch_parsed,"//@href")
Arch_links <- paste(baseurl,Arch_links,sep="")
Last <- length(Arch_links)
First_link <- Arch_links[2]
Last_link <- Arch_links[Last]
dtf <- strextract(First_link,"([[:digit:]]{8})")
dtf <- as.POSIXct(strptime(dtf,"%Y%m%d"))
dtl <- strextract(Last_link,"([[:digit:]]{8})")
dtl <- as.POSIXct(strptime(dtl,"%Y%m%d"))
Archive_data <- {data.frame(datetime=character(),DUID=character(),
MW=numeric(),State=numeric(),
Inertia=numeric(),Region=character())}
print(dtl)
print(dtf)
Arch_parsed <- htmlParse(archurl)
Arch_links <- xpathSApply(Arch_parsed,"//@href")
Arch_links <- paste(baseurl,Arch_links,sep="")
Last <- length(Arch_links)
First_link <- Arch_links[2]
Last_link <- Arch_links[Last]
dtf <- str_extract(First_link,"([[:digit:]]{8})")
dtf <- as.POSIXct(strptime(dtf,"%Y%m%d"))
dtl <- str_extract(Last_link,"([[:digit:]]{8})")
dtl <- as.POSIXct(strptime(dtl,"%Y%m%d"))
Archive_data <- {data.frame(datetime=character(),DUID=character(),
MW=numeric(),State=numeric(),
Inertia=numeric(),Region=character())}
print(dtl)
print(dtf)
Arch_links[1]
Arch_links
Arch_links[2:]
Arch_links[2:Last]
Arch_links
Arch_links[2:Last]
Arch_links[2]
Arch_parsed <- htmlParse(archurl)
Arch_links <- xpathSApply(Arch_parsed,"//@href")
Arch_links <- paste(baseurl,Arch_links,sep="")
Last <- length(Arch_links)
Arch_links <- Arch_links[2:Last]
First_link <- Arch_links[1]
Last_link <- Arch_links[Last]
dtf <- str_extract(First_link,"([[:digit:]]{8})")
dtf <- as.POSIXct(strptime(dtf,"%Y%m%d"))
dtl <- str_extract(Last_link,"([[:digit:]]{8})")
dtl <- as.POSIXct(strptime(dtl,"%Y%m%d"))
dtl
dtf
dtf
Last_link
Arch_parsed <- htmlParse(archurl)
Arch_links <- xpathSApply(Arch_parsed,"//@href")
Arch_links <- paste(baseurl,Arch_links,sep="")
Last <- length(Arch_links)
Arch_links <- Arch_links[2:Last]
First_link <- Arch_links[1]
Last_link <- Arch_links[Last-1]
dtf <- str_extract(First_link,"([[:digit:]]{8})")
dtf <- as.POSIXct(strptime(dtf,"%Y%m%d"))
dtl <- str_extract(Last_link,"([[:digit:]]{8})")
dtl <- as.POSIXct(strptime(dtl,"%Y%m%d"))
dtl
dtf
dtf>dtl
dtf<dtl
dtl+1
Archive_data <- {data.frame(datetime=character(),DUID=character(),
MW=numeric(),State=numeric(),
Inertia=numeric(),Region=character())}
Archive_data
download.file(Arch_links,"temparch.zip")
Arch_links
download.file(Arch_links[1],"temparch.zip")
ziplist <- unzip("temparch.zip")
ziplist
head(ziplist)
ziplist[1]
tempzip <- unzip(ziplist[1])
templist <- download.file(tempzip)
templist <- download.file(tempzip,"SCADA.zip")
templist <- download.file(tempzip,"SCADA.csv")
tempzip
tempzip
tempzip <- unzip(ziplist[1])
tempzip
ziplist
ziplist[1]
tempzip <- unzip(ziplist[1])
tempzip
Arch_file <- read.csv(tempzip,skip=2,header=F)
Arch_file
Arch_file <- subset(Arch_file,select=V5:V7)
Arch_file
head(Arch_file)
names(Arch_file)<-c("datetime","DUID","MW")
head(Arch_file)
Arch_file$State <- as.numeric(Arch_file$MW>0)
Arch_file$datetime<-as.POSIXct(strptime(Arch_file$datetime,"%Y/%m/%d %H:%M:%S")
)
Arch_file
Arch_file <- na.omit(Arch_file)
Arch_file
len <- length(Arch_file$DUID)
len
for(i in 1:len) {
index <- match(Arch_file$DUID[i],gendata$DUIDUn,nomatch = "NA")
Arch_file$Inertia[i] <- gendata$Inertia[index]*Arch_file$State[i]
Arch_file$Region[i] <- as.character(gendata$Region[index])
{if(Arch_file$Region[i] == "NSW1" ||
Arch_file$Region[i] == "QLD1" ||
Arch_file$Region[i] == "SA1" ||
Arch_file$Region[i] == "VIC1" ) Arch_file$Region[i] <- "NEM1"
}
Arch_file$Technology[i] <- as.character(gendata$Technology.Descriptor[index])
Arch_file$Participant[i] <- as.character(gendata$Participant[index])
}
if(Arch_file$Region[i] == "NSW1" ||
#                   Arch_file$Region[i] == "QLD1" ||
#                   Arch_file$Region[i] == "SA1" ||
#                   Arch_file$Region[i] == "VIC1" ) Arch_file$Region[i] <- "NEM1"
)
for(i in 1:len) {
#               index <- match(Arch_file$DUID[i],gendata$DUIDUn,nomatch = "NA")
#               Arch_file$Inertia[i] <- gendata$Inertia[index]*Arch_file$State[i]
#               Arch_file$Region[i] <- as.character(gendata$Region[index])
#               if(Arch_file$Region[i] == "NSW1" || Arch_file$Region[i] == "QLD1" ||Arch_file$Region[i] == "SA1" || Arch_file$Region[i] == "VIC1" ){
#                    Arch_file$Region[i] <- "NEM1"
#                       }
#             Arch_file$Technology[i] <- as.character(gendata$Technology.Descriptor[index])
#             Arch_file$Participant[i] <- as.character(gendata$Participant[index])
#             }
)
for(i in 1:len) {
index <- match(Arch_file$DUID[i],gendata$DUIDUn,nomatch = "NA")
Arch_file$Inertia[i] <- gendata$Inertia[index]*Arch_file$State[i]
Arch_file$Region[i] <- as.character(gendata$Region[index])
if(Arch_file$Region[i] == "NSW1" || Arch_file$Region[i] == "QLD1" ||Arch_file$Region[i] == "SA1" || Arch_file$Region[i] == "VIC1" ){
Arch_file$Region[i] <- "NEM1"
}
Arch_file$Technology[i] <- as.character(gendata$Technology.Descriptor[index])
Arch_file$Participant[i] <- as.character(gendata$Participant[index])
}
j<1
j<-1
if(j<1||j<2)
print(j)
if(j<1||j<2) print(j)
if(Arch_file$Region[i] == "NSW1" || Arch_file$Region[i] == "QLD1" || Arch_file$Region[i] == "SA1" || Arch_file$Region[i] == "VIC1" ){
Arch_file$Region[i] <- "NEM1"
}
if(Arch_file$Region[i] == "NSW1" || Arch_file$Region[i] == "QLD1" || Arch_file$Region[i] == "SA1" || Arch_file$Region[i] == "VIC1" ){
Arch_file$Region[i] <- "NEM1"}
if(Arch_file$Region[i] == "NSW1"){
Arch_file$Region[i] <- "NEM1"}
Arch_file$Region[1]
Arch_file
Arch_file$Region[1]
if(Arch_file$Region[i] == "NSW1" || Arch_file$Region[i] == "QLD1" || Arch_file$Region[i] == "SA1" || Arch_file$Region[i] == "VIC1" ){
Arch_file$Region[i] <- "NEM1"}
templist <- download.file(tempzip)
Arch_file <- read.csv(tempzip,skip=2,header=F)
Arch_file <- subset(Arch_file,select=V5:V7)
names(Arch_file)<-c("datetime","DUID","MW")
Arch_file$State <- as.numeric(Arch_file$MW>0)
Arch_file$datetime<-as.POSIXct(strptime(Arch_file$datetime,"%Y/%m/%d %H:%M:%S"))
Arch_file <- na.omit(Arch_file)
len <- length(Arch_file$DUID)
len
Arch_file
i <- 1
i <- 1
index <- match(Arch_file$DUID[i],gendata$DUIDUn,nomatch = "NA")
Arch_file$Inertia[i] <- gendata$Inertia[index]*Arch_file$State[i]
Arch_file$Region[i] <- as.character(gendata$Region[index])
if(Arch_file$Region[i] == "NSW1" || Arch_file$Region[i] == "QLD1" || Arch_file$Region[i] == "SA1" || Arch_file$Region[i] == "VIC1" ){
Arch_file$Region[i] <- "NEM1"
}
Arch_file$Region
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
View(Gendata)
Gendata
Gendata$DUIDUn
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
head(Gendata$DUIDUn)
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
source("Hard_Arch_Download.R")
